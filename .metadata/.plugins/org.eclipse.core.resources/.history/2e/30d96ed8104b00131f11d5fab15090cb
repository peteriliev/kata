package com.iliev.peter.kata.test;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.util.Arrays;

import org.junit.Test;

import com.iliev.peter.kata.DFS1;
import com.iliev.peter.kata.Graph;
import com.iliev.peter.kata.IGraph;

public class GraphTest {

	@Test
	public void t1()
	{
		final IGraph g = Graph.newInstance(0);
		g.addEdge(0, 1);

		assertTrue(g.isEdge(0, 1));
	}

	@Test
	public void t11()
	{
		final IGraph g = Graph.newInstance(0);
		g.addEdge(0, 1);

		assertTrue(g.isEdge(0, 1));
		g.removeEdge(0, 1);
		assertFalse(g.isEdge(0, 1));
	}

	@Test
	public void t12()
	{
		final IGraph g = Graph.newInstance(0);
		g.addEdge(0, 1, 13);

		assertTrue(g.isEdge(0, 1, 13));
		assertFalse(g.isEdge(0, 1, 14));

		g.removeEdge(0, 1);
		assertFalse(g.isEdge(0, 1, 13));
		assertFalse(g.isEdge(0, 1, 14));
	}

	@Test
	public void t2()
	{
		final IGraph g = Graph.newInstance(0);

		assertFalse(g.isEdge(0, 1));
	}

	@Test
	public void t3()
	{
		final IGraph g = Graph.newInstance(0);

		g.addEdge(0, 1);
		assertFalse(g.isEdge(1, 0));
	}

	@Test
	public void t4()
	{
		final IGraph g = Graph.newInstance(19);

		myAdd(g, 2, 11);
		myAdd(g, 2, 10);
		myAdd(g, 2, 1);
		
		myAdd(g, 1, 3);
		myAdd(g, 1, 0);
		myAdd(g, 3, 12);
		
		myAdd(g, 3, 4);
		myAdd(g, 0, 6);
		myAdd(g, 0, 8);
		
		myAdd(g, 13, 4);
		myAdd(g, 15, 9);
		myAdd(g, 5, 9);
		
		myAdd(g, 13, 4);
		myAdd(g, 15, 9);
		myAdd(g, 5, 9);
		
		myAdd(g, 5, 4);
		myAdd(g, 5, 6);
		myAdd(g, 6, 7);

		myAdd(g, 8, 7);
		myAdd(g, 8, 14);
		
		myAdd(g, 16, 17);
		myAdd(g, 17, 18);
		
		final int[] result = DFS1.dfs(g, 0);
		System.out.println(Arrays.toString(result));
		
		assertTrue(areConnected(result, 0, 15));
		assertTrue(areConnected(result, 0, 13));
		assertFalse(areConnected(result, 0, 18));
		
		assertFalse(areConnected(result, 5, 17));
		assertTrue(areConnected(result, 16, 18));
	}

	private static boolean areConnected(final int[] pred, final int u, final int v) {
		return areConnectedInternal(pred, u, v) || areConnectedInternal(pred, v, u);
	}
	private static boolean areConnectedInternal(final int[] pred, final int u, final int v) {
		if (u >= pred.length || v >= pred.length) {
			return false;
		}
		
		int pr = u;
		do {
			pr = pred[pr];
		} while (pr != u && pr != v);
		
		return pr == v;
	}
	
	private static void myAdd(final IGraph graph, final int u, final int v) {
		graph.addEdge(u, v);
		graph.addEdge(v, u);
	}
}
